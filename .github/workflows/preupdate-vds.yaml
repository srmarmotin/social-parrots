name: Package Pre Updater For VDS
on:
    workflow_dispatch:
env:
    PACKAGES: '@inertiajs/react @types/react'
    PACKAGE_PATHS: './apps/*/package.json ./packages/*/package.json'
    IGNORED_PATHS: '*/apps/ptv*/* */apps/chromecast*/* */node_modules/*'

jobs:
    update-vds:
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
        steps:
            - name: Checkout repo
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22

            - name: Get latest versions and check outdated packages
              id: check-outdated
              run: |
                  outdated=""

                  for path in $PACKAGE_PATHS; do
                    include+=" -o -path \"$path\""
                  done
                  find_cmd="find . \\(${include/-o /} \\)"

                  for ignore in $IGNORED_PATHS; do
                    find_cmd+=" -not -path \"$ignore\""
                  done
                  echo "Finding package.json files with command: $find_cmd"           

                  for pkg_file in $pkg_files; do
                      echo "Checking $pkg_file for VDS packages..."
                      tmp_file="${pkg_file}.tmp"
                      cp "$pkg_file" "$tmp_file"

                      for pkg in $PACKAGES; do
                          latest=$(npm view $pkg version)
                          current=$(jq -r ".dependencies[\"$pkg\"] // \"\"" "$pkg_file")

                          if [ -n "$current" ] && [ "$current" != "null" ] && [ "$current" != "$latest" ]; then
                              echo "$pkg is outdated in $pkg_file: $current --> $latest"
                              jq --arg pkg "$pkg" --arg version "$latest" '
                              if .dependencies[$pkg] then .dependencies[$pkg] = $version else . end
                              ' "$tmp_file" > "$tmp_file.new" && mv "$tmp_file.new" "$tmp_file"
                              outdated="true"
                          fi
                      done

                      # Apply changes if any were made
                      mv "$tmp_file" "$pkg_file"
                      [ -f "$tmp_file.new" ] && rm "$tmp_file.new"
                  done
                  echo "outdated=$outdated" >> $GITHUB_OUTPUT

            - name: Install dependencies
              uses: pnpm/action-setup@v4
              with:
                  version: 10.11.0
                  run_install: false

            - name: Install updated dependencies
              if: steps.check-outdated.outputs.outdated == 'true'
              run: |
                  pnpm install --no-frozen-lockfile

            - name: Create PR if outdated
              if: steps.check-outdated.outputs.outdated == 'true'
              uses: peter-evans/create-pull-request@v5
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  branch: 'chore/update-vds'
                  commit-message: 'chore: Update VDS packages to latest versions'
                  title: 'chore: Update VDS packages'
                  body: |
                      This PR updates VDS packages to their latest versions across all package.json files in:
                      - apps directory
                      - packages directory
